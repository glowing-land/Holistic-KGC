{
  "iri": "Paper-Building_An_Open_Source_Linux_Computing_System_On_RISC-V",
  "title": "Building An Open Source Linux Computing System On RISC-V",
  "authors": [
    "M. Numan Ince",
    "Joseph Ledet",
    "Melih Gunay"
  ],
  "keywords": [
    "Open Instruction Set Architecture",
    "RISC-V",
    "Linux from Scratch",
    "Hardware",
    "QEMU"
  ],
  "sections": [
    {
      "iri": "Section-1",
      "subtitle": "Abstract",
      "paragraphs": [
        {
          "iri": "Section-1-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-1-Paragraph-1-Sentence-1",
              "text": "Abstract\u2014As is commonly known, hardware in a computer system requires a processor to run the operating system."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-2",
              "text": "The primary architectures that form the basis of most processors are CISC and RISC."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-3",
              "text": "CISC includes long sub-level commands for effective memory management and simple compiler implementations to be developed."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-4",
              "text": "Thus CISC has a complex set of commands; hence the name Complex Instruction Set Computer."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-5",
              "text": "On the other hand, CISC has had backward compatibility since the 1970s."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-6",
              "text": "Reduced Instruction Set Computer (RISC), the other popular architecture, simplifies command sets and handles access to memory with load-store commands."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-7",
              "text": "Since the instruction set is simplified, the hardware runs faster."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-8",
              "text": "In addition, RISC-based processors contain less chip-sets and may be designed faster."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-9",
              "text": "Currently, with the prevalence of the Internet of Things (IoT), the demand for RISC architectures has increased and its usage in embedded devices has become widespread."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-10",
              "text": "The ARM processor is a successful example of the RISC architecture adaptation."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-11",
              "text": "However, ARM processor production has certain license term limitations and contains a few design flaws in its architecture [1]."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-12",
              "text": "In 2010, the RISC-V processor architecture, which was developed as an open source instruction set at Berkeley University, paves the way for open source hardware in terms of its BSD license and design professionalism."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-13",
              "text": "As a result, it will be possible to produce their own processors for communities and organizations without license restrictions."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-14",
              "text": "In this paper, we discuss the building blocks of the development life-cycle of an open source operating system on the RISC-V architecture."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-15",
              "text": "As an operating system base, we implement MILIS Linux, an open source operating system development project."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-16",
              "text": "It has an independent user space and its own package manager."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-17",
              "text": "For a completely independent open source computing system, open source RISC-V hardware architecture provides the freedom that is needed."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-2",
      "subtitle": "Introduction",
      "paragraphs": [
        {
          "iri": "Section-2-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-1-Sentence-1",
              "text": "A. RISC-V"
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-2",
              "text": "In order to understand the RISC-V architectures that are used by current processor families, first it is essential to understand RISC."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-3",
              "text": "These processors have a general set of instructions that are more homogeneous in length and execution time than CISC, which corresponds to more basic computational operations."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-4",
              "text": "The implementation of the instructions is optimized and cluster command processing is used to increase the operating speed."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-5",
              "text": "More register areas to minimize memory usage is included."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-6",
              "text": "In order to achieve less memory and processing power, methods such as compression of the instruction set are utilized [2]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-7",
              "text": "The disclosure of the Meltdown and Spectre vulnerabilities [1] shows that if we apply high security at software level, still weakness of computing resumes if we don't ensure at hardware level."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-8",
              "text": "Processors are executing instructions in the computer with high-level access rights."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-9",
              "text": "Some of the runtime conditions of the system are not visible, such as the Intel management engine [3]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-10",
              "text": "In order to overcome this vulnerability, we have to make use of the open source synergy that Linux creates in the kernel on the hardware side."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-11",
              "text": "Because the opening of ISA (Instruction Set Architecture), it can be discovered and improved by industry experts, commercial innovators and top academics."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-12",
              "text": "The ability to add extensions to basic ISA makes it suitable for applications that require special configuration."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-13",
              "text": "Although the processor market has been running for a long time, it has not been able to make great improvements, due to closed and license problems [4]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-14",
              "text": "Although open source hardware studies have historically been conducted on Sparc [5] architectures or Power ISA [6] as open concepts, these projects have been insufficient and will not be able to create a large enough open source ecosystem."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-15",
              "text": "Similarly, OpenRISC [7] is based on the open-source processor architecture OpenRISC1000."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-16",
              "text": "Although Linux kernel 3.1 is supported, kernel-based improvements have slowed down over time."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-17",
              "text": "Currently, though there is insufficient attention paid to these types of advances, Debian produced a port in 2014."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-18",
              "text": "However, it closed the project due to copyright reasons in 2016."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-19",
              "text": "But since UC-Berkeley started designing the RISC-V command set architecture, there has been new mobilization in academia and industry [8]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-20",
              "text": "First of all, RISC-V is free and open source."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-21",
              "text": "The usage license is licensed under the BSD license."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-22",
              "text": "RISC-V primarily focuses on defining the command set architecture rather than specific implementations."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-23",
              "text": "Still, there are also free open source core hardware designs [9]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-24",
              "text": "RISC-V which is a nice leap for the processor sector has started to support many companies."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-25",
              "text": "Technology relevant companies from many countries participated to RISC-V foundation."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-26",
              "text": "Some major companies and institutes that contribute this foundation include; IIT Madras(India) [10], ETH Zurich(Swiss) [11], ASTC(Australia) [12], Barcelona Supercomputing Center(Spain) [13], ASELSAN(Turkey) [14]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-27",
              "text": "By the way Western Digital also started to develop and use RISC-V architecture based processors in storage devices [15]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-28",
              "text": "Unlike OpenRISC, RISC-V is aimed at a wider range of applications."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-29",
              "text": "The Linux kernel's support for RISC-V is fairly new, starting with version 4.15 and 5.0 provides more extensive support, as well as RISC-V / Linux support for the kernel porting."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-30",
              "text": "One of the outputs of RISC-V for hardware is to offer a more secure architecture and processor capabilities [12]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-31",
              "text": "Due to the lack of speculative memory access in the RISC-V processor, there is no hardware weakness such as the Meltdown-Spectre vulnerability."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-32",
              "text": "The most important advantage of RISC-V is that it is easy to apply qualified security ideas because the work is carried out as open source."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-2-Sentence-1",
              "text": "B. MILIS Linux"
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-2",
              "text": "MILIS (Milli Isletim Sistemi in Turkish) [16] project is a Linux distribution project that started voluntarily in 2016 and implemented using LFS (Linux from Scratch) [17] techniques."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-3",
              "text": "Since 2019, the project is supported by Akdeniz University BAP unit [18]."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-4",
              "text": "MILIS Linux differs from other GNU/Linux projects with its independent base and own package manager."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-5",
              "text": "For the time being, a desktop-targeted operating system is being developed for x86-64 systems."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-6",
              "text": "Target users of MILIS are, primarily government agencies, commercial organizations and private users."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-7",
              "text": "It has the goal of being a free and easy to use operating system for individual and organizational use."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-8",
              "text": "Unlike the other distributions, which is commonly forked from Debian, MILIS is not based on any existing Linux distribution."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-9",
              "text": "It has its own package production collection and independent root file-system production."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-10",
              "text": "It has open development platform for developers by providing pure Linux usage and development experience."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-11",
              "text": "Secure network structure may easily be configured via a web browser."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-12",
              "text": "Although the project has been initiated voluntarily, it has the ultimate goal of being an open source software ecosystem for the academic environment."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-13",
              "text": "MILIS Linux project now aims to completely work on open source hardware and be one of the first in among Linux distributions."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-14",
              "text": "Such open source hardware and operating system will have the benefit of being immune to world trade disputes such as the recent developments of Huawei product bans."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-3-Sentence-1",
              "text": "C. MILIS Linux and RISC-V"
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-2",
              "text": "In order to achieve a completely open and secure system, related studies were followed and concluded that the RISC-V ISA study seem to be the most promising."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-3",
              "text": "The members of the RISC-V foundation include some reputable companies including ASELSAN as a silver member."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-4",
              "text": "ASELSAN and Bilkent University are collaborating to produce chips using RISC-V architecture [19]."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-5",
              "text": "Although R&D for chip production is ongoing, to our knowledge, we are not aware of any operating system work locally to support such architecture."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-6",
              "text": "Globally, such work is also limited to few distributions."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-7",
              "text": "To remedy this gap, we are developing a fork of the MILIS project to support RISC-V architecture."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-8",
              "text": "In addition, it is desired to work as a separate branch for embedded devices."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-9",
              "text": "It is expected that with an increasing interest in IoT and Industry 4.0, such software will likely have high interest."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-10",
              "text": "Currently, Genpro from Israel [20] and Shakti [21] from India are working on new generation processors based on RISC-V architecture."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-11",
              "text": "Recent interest in open processor architecture are likely to promote the open source operating systems."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-12",
              "text": "The MILIS project is now planned to be one of the first open source Linux based OS targeting RISC-V."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-3",
      "subtitle": "Related Work",
      "paragraphs": [
        {
          "iri": "Section-3-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-1-Sentence-1",
              "text": "With the RISC-V processor productions, Si-five has produced a number of development motherboards for developers [22]."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-2",
              "text": "Linux distributions on motherboards with these processors started to gain momentum."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-3",
              "text": "Legacy distributions such as Debian have created a project group on the RISC-V and started porting as infrastructure transfer work [23]."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-4",
              "text": "Fedora develops a native OS by compiling packages targeting RISC-V."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-5",
              "text": "It has also established a web-based compilation tracking system [24]."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-6",
              "text": "Apart from these, it can also produce minimal custom Linux images with Yocto [25] and Buildroot [26] Linux Kit."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-7",
              "text": "Buildroot currently ported for 64-bit RISC-V architecture."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-8",
              "text": "Buildroot supports RISC-V with native and original implementation."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-9",
              "text": "In this paper, we will focus on increasing kernel support and reducing porting times by a proposed reference implementation based on MILIS."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-10",
              "text": "We endeavored to build a Linux from Scratch from the root file system."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-11",
              "text": "Also with the rapid integration of Linux distro developers, we can improve our user-space application level."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-4",
      "subtitle": "Implementation",
      "paragraphs": [
        {
          "iri": "Section-4-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-1-Sentence-1",
              "text": "Currently, MILIS Linux is running smoothly with 64-bit systems."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-2",
              "text": "Our RISC-V architecture-oriented work can be called a port in the Linux community."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-3",
              "text": "Port aims to produce kernel and userspace packages available in MILIS and a hardware based 64-bit little-endian RISC-V compatible base system."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-4",
              "text": "RISC-V also allows 32-bit and 128-bit ISA configurations, however the development of other variants will be considered as future work."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-5",
              "text": "\u2022 32-bit architectures, except for specific purposes;"
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-6",
              "text": "\u2022 32-bit ports in MILIS have never been done, it is not necessary."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-7",
              "text": "\u2022 128-bit operation is not realistic at this time."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-8",
              "text": "Since MILIS is a Linux system that applies the Linux from Scratch directives, similar methods can be used to build the basis of the RISC-V architecture."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-9",
              "text": "In this section, we detail the work packages that are typically included in porting."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-2-Sentence-1",
              "text": "A. System Emulation"
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-2",
              "text": "RISC-V system emulator may be used during the development and testing of the OS without real hardware."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-3",
              "text": "Low cost easy setup QEMU virtual machine [27] supports RISC-V since 2.12."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-4",
              "text": "This is opposite of QEMU's full system emulation mode, which ensures emulation devices and requires you to boot an operating system natively."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-5",
              "text": "We use QEMU 4.0.0 version."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-3-Sentence-1",
              "text": "B. Toolchain"
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-2",
              "text": "Toolchain is a cross-compiler for GNU."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-3",
              "text": "RISC-V requires Binutils 2.30 or above versions to build a kernel with GCC 7.1 or above."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-4",
              "text": "Currently, we choose GCC 9.1 and Binutils 2.32 versions."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-5",
              "text": "There are 3 common C libraries; Glibc, Uclibc and Musl."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-6",
              "text": "Only Glibc has upstream RISC-V support for 64-bit only architecture."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-7",
              "text": "We choose Glibc version 2.29 to build packages [28]."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-4-Sentence-1",
              "text": "C. Bootloader"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-2",
              "text": "A bootloader is a piece of code that executes before an operating system runs."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-3",
              "text": "Bootloaders usually provide several options to boot the OS kernel and also contain commands for debugging and/or modifying the kernel environment before booting."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-4",
              "text": "RISC-V specific Berkley Bootloader(BBL) may be used in this project [29]."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-5",
              "text": "U-boot may be another alternative, but requires more work for porting to RISC-V."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-6",
              "text": "BBL will support;"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-7",
              "text": "\u2022 Starting and response tasks to timer interrupts,"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-8",
              "text": "\u2022 Boot chain loading for Linux and default boot loading process,"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-9",
              "text": "\u2022 RISC-V processor is not equipped to handle some instructions directly in hardware so BBL handles them as well."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-5-Sentence-1",
              "text": "BBL is somewhat special in that it cannot chainload a Linux kernel like GRUB or U-Boot, but instead the BBL compile scripts links the kernel binary directly into the BBL ELF file."
            },
            {
              "iri": "Section-4-Paragraph-5-Sentence-2",
              "text": "Therefore BBL must always be rebuilt within kernel."
            },
            {
              "iri": "Section-4-Paragraph-5-Sentence-3",
              "text": "Creating a proper separation between BBL and the kernel is planned but not yet implemented."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-6-Sentence-1",
              "text": "RISC-V Linux port has been accepted into Linux tree and is slated to release as part of 4.15 since 2017."
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-2",
              "text": "While this is a major milestone, still much work remains related to the Linux kernel and the userspace."
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-3",
              "text": "Additionally, much research and many tasks remain in the following areas:"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-4",
              "text": "\u2022 Init and Halt Code"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-5",
              "text": "\u2022 Atomic and Locking Code"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-6",
              "text": "\u2022 Generic library routines and assembly"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-7",
              "text": "\u2022 ELF and module implementation"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-8",
              "text": "\u2022 Task implementation"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-9",
              "text": "\u2022 Device, timer, IRQs, and the SBI"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-10",
              "text": "\u2022 Paging and MMU"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-11",
              "text": "\u2022 User-facing API"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-12",
              "text": "\u2022 Build Infrastructure"
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-7-Sentence-1",
              "text": "For building the kernel, we used the 5.0 stable version from the kernel git repository [30] using the following compilation parameters; CROSSCOMPILE=riscv64-linuxgnu- ARCH=riscv."
            },
            {
              "iri": "Section-4-Paragraph-7-Sentence-2",
              "text": "And BBL will compile with -withpayload config parameter to reference compiled kernel."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-8-Sentence-1",
              "text": "E. Pre-Root File System and Package Production"
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-2",
              "text": "We cross-compile packages from x86-64 host to riscv64 target file system."
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-3",
              "text": "At the conclusion of this process, we were able to achieve a bootable operating system for RISC-V hardware or an emulator."
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-4",
              "text": "This root filesystem, named prerootfs, will be used at package production."
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-5",
              "text": "After producing the necessary packages, we will re-construct the base file system of RISC-V using these packages."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-9",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-9-Sentence-1",
              "text": "F. Bootable Image"
            },
            {
              "iri": "Section-4-Paragraph-9-Sentence-2",
              "text": "Recreation of Rootfs using MILIS enables us to distribute an initial bootable binary disk image that is completely built from MILIS packages for kernel and user space software."
            },
            {
              "iri": "Section-4-Paragraph-9-Sentence-3",
              "text": "With adding live system packages, we will get a live image to run a virtual board."
            },
            {
              "iri": "Section-4-Paragraph-9-Sentence-4",
              "text": "Fig. 1 shows the general workflow that is applied during the building of the RISC-V computing environment."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-5",
      "subtitle": "Conclusion",
      "paragraphs": [
        {
          "iri": "Section-5-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-5-Paragraph-1-Sentence-1",
              "text": "In this paper, the RISC-V processor has been compared to other architectures and its bright future was implied."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-2",
              "text": "Being opensource and its community driven design through open source hardware initiative, it may be used in mission critical projects."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-3",
              "text": "Especially with the advances in the Internet of Things, the use of RISC-V processor boards may likely become popular in the market with the exciting features it provides."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-4",
              "text": "Because many companies have started R&D studies for RISC-V and become members of the RISC-V foundation."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-5",
              "text": "In addition to hardware information, this open source hardware that we have emphasized in this paper is the necessity of developing an open source and reliable operating system."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-6",
              "text": "In this case, Linux is the best candidate on the basis of this work as the kernel."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-7",
              "text": "Even though port migration of different Linux distributions has already begun, we are stressing the need to create an open source and reliable user ecosystem directly on the Linux kernel by enabling the MILIS Linux project to be ported to a different architecture."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-8",
              "text": "Any development and optimization in this process will add experience to our IT process."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-9",
              "text": "This study will gain momentum with the open computing proposal and will gain more."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-6",
      "subtitle": "Future Work",
      "paragraphs": [
        {
          "iri": "Section-6-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-1-Sentence-1",
              "text": "A. Physical Implementation and Optimizations"
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-2",
              "text": "The work outline performed on the QEMU virtual machine discussed in this study will be applied on a real board based on RISC-V processor."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-3",
              "text": "Compilation and testing will give more accurate results using physical hardware."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-4",
              "text": "Thus, we will have a better understanding of the components that will need to be optimized."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-5",
              "text": "The compilation tools that we use in the bootstrap process will offer more RISC-V support over time and will be optimized."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-6",
              "text": "In addition, alternative libraries instead of Glibc, which we currently use as C libraries, will be evaluated."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-7",
              "text": "Also, with the RISC-V support in the LLVM Compiler Infrastructure [31], native compile support will be increased at the level of programming languages which use LLVM as back-end compiler."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-8",
              "text": "RISC-V porting will be further explored for the kernel level difficulties encountered while providing the necessary solutions."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-9",
              "text": "The necessary sponsors and research project funding supports will be provided for the R&D studies and RISC-V processors with different features will be obtained and the studies will be performed on real equipment."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-2-Sentence-1",
              "text": "B. The Future: Open Hardware and Open Source Operating System"
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-2",
              "text": "Open hardware means license-free; namely with RISC-V virtually anyone can produce potentially better evaluations and much more accurate comparisons with existing works."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-3",
              "text": "There is a range of high quality, open-source RISC-V implementations to modify, rather than just based on estimating or simulations."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-4",
              "text": "Also opening standard will bring about a more active development community so that when sharing patches or ideas, projects will get contributions more quickly."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-5",
              "text": "As of now one aspect of the RISC-V Foundation is responding to proposals and discussing them."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-6",
              "text": "The other aspect is producing proposed changes either in a future specification revision or in hardware."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-7",
              "text": "On the other hand, opening the standards and having a commercially open license would certainly make the processor design and production race more fair."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-8",
              "text": "Also RISC-V will bring a new synergy of open source computer architecture research areas, such as universities started to establish research groups on RISC-V, such as OpenCelerity [32] and SCARV [33]."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-9",
              "text": "Research is expected to be carried out on real hardware with the increase of RISC-V processor manufacturers."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-10",
              "text": "As a result, Linux kernel and userspace seems the best candidate software stack for RISC-V."
            }
          ]
        }
      ]
    }
  ],
  "summary": "Abstract\u2014As is commonly known, hardware in a computer system requires a processor to run the operating system. The primary architectures that form the basis of most processors are CISC and RISC. CISC includes long sub-level commands for effective memory management and simple compiler implementations to be developed. Thus CISC has a complex set of commands; hence the name Complex Instruction Set Computer. On the other hand, CISC has had backward compatibility since the 1970s. Reduced Instruction Set Computer (RISC), the other popular architecture, simplifies command sets and handles access to memory with load-store commands. Since the instruction set is simplified, the hardware runs faster. In addition, RISC-based processors contain less chip-sets and may be designed faster. Currently, with the prevalence of the Internet of Things (IoT), the demand for RISC architectures has increased and its usage in embedded devices has become widespread. The ARM processor is a successful example of the RISC architecture adaptation. However, ARM processor production has certain license term limitations and contains a few design flaws in its architecture [1]. In 2010, the RISC-V processor architecture, which was developed as an open source instruction set at Berkeley University, paves the way for open source hardware in terms of its BSD license and design professionalism. As a result, it will be possible to produce their own processors for communities and organizations without license restrictions. In this paper, we discuss the building blocks of the development life-cycle of an open source operating system on the RISC-V architecture. As an operating system base, we implement MILIS Linux, an open source operating system development project. It has an independent user space and its own package manager. For a completely independent open source computing system, open source RISC-V hardware architecture provides the freedom that is needed.\n\nRISC-V is an open-source instruction set architecture (ISA) that offers a more homogeneous set of instructions compared to CISC, optimizing execution and minimizing memory usage. It addresses vulnerabilities like Meltdown and Spectre by promoting hardware-level security and open-source collaboration. The RISC-V foundation includes contributions from various global institutions, and its architecture supports a wide range of applications. MILIS Linux, initiated in 2016, is an independent Linux distribution aimed at providing a user-friendly operating system, particularly for government and commercial use. It is not based on existing distributions and aims to create an open-source ecosystem. The MILIS project is now developing a fork to support RISC-V architecture, targeting embedded devices and IoT applications, with the goal of being among the first open-source Linux OS for RISC-V.\n\nSiFive has developed several motherboards for RISC-V processors, leading to increased support for Linux distributions. Legacy distributions like Debian are porting to RISC-V, while Fedora is creating a native OS and tracking compilation online. Buildroot has also been adapted for 64-bit RISC-V, supporting both native and original implementations. This paper focuses on enhancing kernel support and reducing porting times through a reference implementation based on MILIS, aiming to build a Linux from Scratch and improve user-space applications.\n\nMILIS Linux is successfully running on 64-bit systems, focusing on RISC-V architecture. The project aims to create kernel and userspace packages for a 64-bit little-endian RISC-V system, with future considerations for 32-bit and 128-bit configurations. Key components include: A. System Emulation using QEMU for development without hardware; B. Toolchain with GCC 9.1 and Binutils 2.32, utilizing Glibc 2.29 for RISC-V support; C. Bootloader options like Berkley Bootloader (BBL) for kernel execution, which requires rebuilding with the kernel; D. Ongoing work on the Linux kernel and userspace, including init code, device handling, and user APIs; E. Pre-Root File System creation through cross-compilation for a bootable OS; F. Bootable Image production from MILIS packages for distribution. The RISC-V Linux port is included in the Linux tree since 2017, marking significant progress.\n\nThis paper discusses the RISC-V processor, highlighting its open-source, community-driven design and potential for mission-critical applications, especially in the Internet of Things. With many companies investing in R&D for RISC-V and joining the RISC-V foundation, its market popularity is expected to rise. The paper emphasizes the need for a reliable open-source operating system, proposing Linux as the ideal kernel. While port migration of Linux distributions is underway, the focus is on developing a robust user ecosystem on the Linux kernel through the MILIS Linux project. This initiative aims to enhance IT processes and will benefit from the open computing proposal.\n\nA. Physical Implementation and Optimizations The work outline performed on the QEMU virtual machine discussed in this study will be applied on a real board based on RISC-V processor. Compilation and testing will give more accurate results using physical hardware. Thus, we will have a better understanding of the components that will need to be optimized. The compilation tools that we use in the bootstrap process will offer more RISC-V support over time and will be optimized. In addition, alternative libraries instead of Glibc, which we currently use as C libraries, will be evaluated. Also, with the RISC-V support in the LLVM Compiler Infrastructure [31], native compile support will be increased at the level of programming languages which use LLVM as back-end compiler. RISC-V porting will be further explored for the kernel level difficulties encountered while providing the necessary solutions. The necessary sponsors and research project funding supports will be provided for the R&D studies and RISC-V processors with different features will be obtained and the studies will be performed on real equipment.\n\nB. The Future: Open Hardware and Open Source Operating System Open hardware means license-free; namely with RISC-V virtually anyone can produce potentially better evaluations and much more accurate comparisons with existing works. There is a range of high quality, open-source RISC-V implementations to modify, rather than just based on estimating or simulations. Also opening standard will bring about a more active development community so that when sharing patches or ideas, projects will get contributions more quickly. As of now one aspect of the RISC-V Foundation is responding to proposals and discussing them. The other aspect is producing proposed changes either in a future specification revision or in hardware. On the other hand, opening the standards and having a commercially open license would certainly make the processor design and production race more fair. Also RISC-V will bring a new synergy of open source computer architecture research areas, such as universities started to establish research groups on RISC-V, such as OpenCelerity [32] and SCARV [33]. Research is expected to be carried out on real hardware with the increase of RISC-V processor manufacturers. As a result, Linux kernel and userspace seems the best candidate software stack for RISC-V.",
  "kg2text": [
    "The RISC-V processor architecture, which utilizes RISC-V hardware, is an open-source instruction set architecture that provides a framework for designing computer processors. This architecture has its broader term as RISC-V itself, and it's based on the RISC-V processor. The RISC-V enables the development and execution of software specifically designed for RISC-V hardware. Additionally, the open source RISC-V hardware architecture is based on this processor architecture and enables the creation of RISC-V hardware. Furthermore, the RISC-V command set architecture defines the RISC-V processor architecture, which in turn has its broader term as RISC- V itself. The RISC-V processor architecture also enables the production of RISC-V processors.",
    "The RISC-V command set architecture defines a standardized framework for designing computer processors, enabling the development of software specifically designed for RISC-V processors. This open standard instruction set architecture (ISA) promotes modularity and extensibility in hardware design. The RISC- V processor is an example of this approach, utilizing the reduced instruction set to improve performance and efficiency. Furthermore, riscv64, a 64-bit implementation of the RISC-V processor architecture, demonstrates the flexibility and innovation enabled by open-source ISA standards.",
    "The RISC-V instruction set architecture has gained popularity due to its open-source nature and flexibility. The RISC-V processor, a type of computer processor that utilizes this ISA, enables the development of custom processors without licensing restrictions. In fact, SiFive's motherboards for developers are an example of such productions. Furthermore, the RISC-V command set architecture is designed to promote modularity and extensibility in hardware design. The open-source nature of the RISC-V instruction set has led to the creation of various implementations, including riscv64, a 64-bit implementation that provides high performance and efficiency. Additionally, the RISC- V computing environment enables developers to create and customize computing systems using this ISA.",
    "The RISC-V processor, based on the riscv64 architecture, defines a command set architecture that focuses on simplicity and extensibility. This open-source instruction set architecture has led to high-quality implementations of processors, such as SiFive's development of motherboards for developers. The RISC-V computing environment utilizes this hardware to execute instructions efficiently. In contrast, the ARM processor is another type of reduced instruction set computer-based processor that has its own limitations and design flaws. Meanwhile, Sparc refers to a family of RISC architectures developed by Sun Microsystems, which have not achieved significant open-source ecosystems.",
    "The RISC-V hardware enables the development of such architectures, which are based on a command set architecture. This open-source instruction set architecture defines instructions that can be executed by RISC-based processors like riscv64, which has a broader term as RISC- V command set architecture. The RISC-V processor is also an alternative to ARM and Sparc, both of which have their own limitations in terms of licensing restrictions and architectural design flaws. Furthermore, the open-source nature of RISC-V allows for high-quality implementations that can be used to develop custom processors without any licensing issues.",
    "The RISC-V command set architecture, as an open standard instruction set architecture (ISA), provides a framework for designing computer processors. It serves as an alternative to ARM processor and has been implemented by various high-quality, open-source implementations. The RISC-V ISA defines instructions that are executed by the RISC-V processor, which is designed to be modular and extensible. In contrast, most processors rely on Complex Instruction Set Computer (CISC) or Reduced Instruction Set Computer (RISC) architectures. Additionally, the command set architecture refers to a defined set of operations that can be performed by a processor, such as those based on RISC-V instruction sets.",
    "The RISC-V computing environment, which refers to a software and hardware framework designed for developing, testing, and running applications on systems that utilize the RISC-V instruction set architecture. This open-source architecture has its roots in such an architecture, which emphasizes flexibility and extensibility in hardware design. The RISC-processor is based on this architecture, utilizing a reduced instruction set to improve performance and efficiency. In fact, most processors can be classified as either Complex Instruction Set Computer (CISC) or Reduced Instruction Set Computer (RISC), with the latter being more homogeneous in its structure compared to CISC architectures. Furthermore, high-quality open-source RISC-V implementations are available for developers to create custom processors without licensing restrictions. The building of this computing environment involves setting up an operating system like MILIS Linux tailored specifically for the RISC-V architecture.",
    "The RISC-V command set architecture defines instructions that are executed by open source RISC-V hardware architectures, which have a broader term of architectures. High quality, open-source RISC-V implementations are based on these architectures and increase the production of RISC-V processor manufacturers. The RISC- V computing environment is a framework for developing applications based on this architecture, which refers to such an architecture. Most processors, including RISC-based ones like riscv64, execute instructions that define command set architectures. Open source RISC-V hardware architectures are alternatives to ARM and have broader terms of architectures.",
    "The RISC-V command set architecture has been implemented by high quality, open-source implementations. This allows for a broader range of applications and fosters innovation in hardware development. The RISC- V computing environment supports these productions, which are based on such an architecture. Additionally, the ARM processor is also an example of this type of architecture. Most processors can be classified as either CISC or RISC architectures, with RISC-based processors executing instructions efficiently. Furthermore, Sparc and other families of RISC processors have been developed to support various applications.",
    "The Sparc family of RISC architectures, developed by Sun Microsystems, has been utilized in various open source hardware studies. In contrast, RISC-V processor productions offer an open-source instruction set architecture that allows for custom processors without licensing restrictions. The riscv64 is a 64-bit instruction set architecture designed for high performance and efficiency. Most processors are based on either Complex Instruction Set Computer (CISC) or Reduced Instruction Set Computer (RISC) architectures, with ARM being another prominent example of RISC-based processors. The building of the RISC-V computing environment refers to the comprehensive process of developing an open-source operating system tailored for the RISC-V architecture. High quality, open-source RISC-V implementations enable developers and researchers to create custom hardware without licensing restrictions.",
    "The RISC-V command set architecture defines a standardized framework for designing computer processors and hardware, promoting flexibility and innovation. The riscv64 instruction set architecture is based on this standard and has been utilized to develop high-quality, open-source implementations of processors that can execute instructions efficiently. In contrast, the ARM processor family relies on more complex architectures, but still shares similarities with RISC-based processors like Sparc. Most processors, including those from ARM and other families, are designed around either CISC or RISC principles. The command set architecture enables developers to create high-quality, open-source implementations of processors that can execute instructions efficiently.",
    "The RISC-V instruction set architecture has gained popularity due to its open-source nature and modularity. High-quality, open-source implementations of this architecture have become foundational designs for most processors. In contrast, Sparc is a type of command set architecture that has not achieved significant adoption in the open-source ecosystem. The building of the RISC-V computing environment involves developing an operating system tailored to this architecture, which includes setting up toolchains and bootloaders. This architecture offers secure features by eliminating vulnerabilities such as speculative memory access. Other architectures like ARM have been compared to RISC-V for their design and functionality.",
    "The RISC-V computing environment, which supports high quality, open-source RISC-V implementations, offers an alternative to ARM processors. These implementations are based on such architecture and provide a framework for designing computer processors without licensing restrictions. In contrast, ARM uses instructions that are part of the broader term architectures. The Sparc family is also a type of RISC-V computing environment, while OpenRISC provides another example of open-source processor design. A study focused on the RISC-V Instruction Set Architecture (ISA) highlights the importance of this architecture in promoting flexibility and innovation in hardware development.",
    "The base file system of RISC-V, which refers to the foundational structure reconstructed using specific packages for MILIS Linux, relies on the RISC-IV processor architecture. This open-source instruction set architecture provides a framework for designing computer processors and hardware, promoting flexibility and innovation in hardware development. The Reduced Instruction Set Computer (RISC) simplifies command sets by utilizing load-store commands for memory access, resulting in faster hardware performance. In fact, both ARM and Sparc are families of RISC architectures that have been utilized in various open-source studies. Furthermore, the instructions executed by RISC-IV processors are more homogeneous in length and execution time compared to Complex Instruction Set Computing (CISC). The development of chips using RISC-V architecture has led to enhanced performance and open-source capabilities. Additionally, the 64-bit little-endian RISC-V compatible base system is a hardware architecture designed for executing instructions based on the RISC-IV instruction set architecture.",
    "The open source RISC-V hardware architecture provides freedom, allowing communities and organizations to create their own processors without licensing restrictions. A fork of the MILIS project supports this effort by developing a Linux distribution tailored for embedded devices using the RISC-V instruction set architecture. The Reduced Instruction Set Computer (RISC) architectures have a broader term in 'architectures', which encompasses both CISC and RISC designs. The RISC-V hardware has its roots in the RISC-V foundation, an organization promoting open standards for processor design. In contrast, the ARM processor is a successful example of adaptation to the Reduced Instruction Set Computing (RISC) architecture. A 64-bit little-endian RISC-V compatible base system is designed as a platform for executing instructions based on the RISC-V instruction set architecture. The OpenRISC1000 and upstream RISC-V support are examples of architectures that have been developed using this open standard ISA. Instructions in RISC processors correspond to more basic computational operations, which enables efficient execution with consistent length and time compared to CISC architectures. Memory management is handled by the RISC processor through load-store commands for data access. A real board based on a RISC-V processor allows for accurate compilation and testing of software. The development of packages specifically designed for RISC-V hardware demonstrates the potential of this open standard architecture.",
    "The RISC-V architecture, an open-source instruction set architecture, has a broader term 'architectures' that refers to various processor architectures. The secure architecture, which handles access to memory, uses packages and supports high-quality implementations of the RISC-V command set architecture. This architecture is aimed at providing a wider range of applications and is free and open source. It also utilizes riscv64, a 64-bit instruction set architecture based on the RISC principles. The operating system work targets such an architecture, which implies its bright future.",
    "The RISC-V computing environment, which refers to a software and hardware framework designed for developing, testing, and running applications on systems that utilize the RISC-V instruction set architecture. The base file system of RISC-V reconstructs its foundational structure using specific packages targeting this architecture. Many companies participate in the RISC-V foundation to support the development and implementation of open-source processor architectures. Optimized implementations of instructions enable efficient processing, while high-quality, open-source RISC-V implementations facilitate innovation without licensing restrictions. The SiFive company produces motherboards for developers working on RISC-V-based systems.",
    "The development of an open source and reliable operating system, specifically MILIS Linux, for RISC-V architecture has gained momentum with the introduction of the open computing proposal. This study aims to provide a comprehensive overview of the building process of the RISC-V computing environment, which involves creating compatible kernel and user space packages tailored for RISC-V processors. The project targets the development of an independent base system that can be used as a foundation for various applications. In this context, the term 'system' refers to the computing system that operates on the RISC-V architecture, including hardware and software components necessary for executing instructions and managing runtime conditions.",
    "RISC-V, an open-source instruction set architecture (ISA), provides a standardized framework for designing computer processors and hardware. The project group aims to produce a 64-bit little-endian RISC-V compatible base system using the port. OpenRISC1000 has a broader term of ISA, which defines the set of instructions that a processor can execute. MILIS Linux is an open-source operating system development project designed to operate on the RISC-V architecture. The implementation of the instructions in CISC includes long sub-level commands, while different architectures have a broader term of architectures. Most processors refer to primary computer architectures, specifically Complex Instruction Set Computer (CISC) and Reduced Instruction Set Computer (RISC).",
    "This paper discusses the development life-cycle of an open source operating system built on the RISC-V architecture, specifically focusing on the implementation of MILIS Linux. The processor executes instructions, and x86-64 hosts have a broader term in architectures. The reference implementation based on MILIS is developing a fork of the MILIS project. Power ISA has a broader term in architectures, while RISC-V has a broader term in open source hardware. MILIS Linux is adapting to run on RISC-V architecture, and RISC-V hardware refers to physical computing systems that utilize the RISC-V instruction set architecture. ARM and OpenRISC are types of processors. The development and testing of the OS seems best suited for the Linux kernel, which supports RISC-V. Operating system work has a broader term in ongoing efforts to create open source solutions. Studies focused on the RISC-V Instruction Set Architecture aim to develop secure computing systems.",
    "The RISC-V architecture has gained popularity due to its open-source nature and flexibility, making it an attractive option for hardware development. The market expects RISC-V processor boards to become popular as they offer a standardized framework for designing computer processors. These boards are designed with various computing applications in mind, including embedded systems and development environments. In addition, the RISC-V architecture supports 32-bit and 128-bit ISA configurations, making it suitable for different types of applications. The LLVM Compiler Infrastructure also provides support for the RISC-V instruction set architecture. Furthermore, the recreation of rootfs is a crucial step in building an open-source Linux computing system on the RISC-V architecture.",
    "The Any development and optimization process will add experience to our IT process, which involves creating an open source operating system specifically for RISC-V architecture. This processor has a broader term of 'processor', similar to ARM processor production. The RISC-V instruction set includes extensions to basic ISA, while the open source RISC-V hardware architecture is part of physical hardware. A web-based compilation tracking system and its associated software tools require optimization on this new generation processors based on RISC-V. In 2017, a major milestone was achieved with the acceptance of the RISC-V Linux port into the Linux kernel tree as version 4.15. The development and testing of MILIS Linux, an open source operating system project for RISC-V architecture, utilizes emulation tools like QEMU to simulate the environment without requiring physical hardware.",
    "The MILIS project, an open-source Linux distribution initiative, aims to develop a free and user-friendly operating system for RISC-V architecture. The project utilizes packages targeting RISC-V to reconstruct its base file system, which will be used as a foundation for building the RISC-V computing environment. This effort is part of a broader trend in developing open-source hardware and software ecosystems. In this context, few distributions currently support the RISC-V architecture, highlighting a gap that MILIS aims to fill.",
    "This study discusses the development and implementation of an open source operating system, specifically MILIS Linux, on RISC-V architecture. The QEMU virtual machine allows for emulation of RISC-V systems without physical hardware. ARM processor has a broader term in physical hardware. High quality, open-source RISC-V implementations modify estimating or simulations to create accurate models. Device, timer, IRQs, and the SBI have a broader term as Device. BBL handles instructions on RISC-V processor boards which are part of hardware in a computer system. Task implementation has a broader term as implementations. ARM processor also has a broader term as hardware. The 64-bit little-endian RISC-V compatible base system is another type of hardware in a computer system. Packages have a broader term as distributions and can be cross-compiled to riscv64 target file systems using Buildroot, which supports the open source RISC-V architecture. Open source hardware studies on Sparc have been conducted. Load-store commands are instructions that facilitate data transfer between processor and memory. The compilation tools offer RISC-V support and will be optimized for better performance.",
    "The RISC-V porting process involves adapting software, particularly operating systems and applications, to run on RISC-V architecture. This requires addressing specific challenges and optimizations required for kernel-level integration. The Linux kernel has been adapted for RISC-V architecture, enabling compatibility and performance optimization for devices using this instruction set. Additionally, the open processor architecture promotes the development of open-source operating systems, which can be customized for various computing needs. Furthermore, the native implementation of Buildroot tool enables the creation of custom Linux images tailored for RISC-V systems.",
    "The RISC-V architecture has been gaining popularity, with many companies becoming members of the RISC-V foundation. This open standard instruction set architecture provides a standardized framework for designing computer processors and hardware, promoting flexibility and innovation in hardware development. The MILIS project aims to develop an open source Linux distribution specifically designed for this architecture, providing a free and user-friendly platform for various users including government agencies and private organizations. U-boot is an open-source bootloader commonly used in embedded systems to initialize hardware and load operating systems. OpenRISC is another processor architecture that provides a framework for designing RISC processors. The necessary packages refer to the compiled software components required to create a functional root filesystem for this architecture, which are produced during the cross-compilation process from an x86-64 host.",
    "The RISC-V processor boards, which utilize physical hardware or hardware platforms designed for various computing applications, are compatible with the 64-bit little-endian RISC-V architecture. This foundation has responded to proposals and discussed changes regarding specifications and hardware related to the RISC-V instruction set. The runtime conditions of these systems can be affected by factors such as system performance and security. Any development and optimization processes contribute to experience in creating open source operating systems like MILIS Linux, which is designed for 64-bit systems and aims to provide a free and easy-to-use operating system. Implementations like Buildroot have been ported for riscv64, while the RISC-V foundation produces proposed changes. The kernel version 5.0 has been used in building the core component of MILIS Linux, which is an open source operating system development project designed to operate on the RISC-V architecture.",
    "The RISC-V architecture has gained popularity due to its open-source nature and community-driven design. The E. Pre-Root File System and Package Production process involves cross-compiling software packages for the RISC-V architecture, creating a bootable root filesystem named prerootfs that serves as the foundation for building an operating system environment. This effort is driven by organizations such as ASTC, which contributes to the RISC-V Foundation. The development of MILIS Linux, an open-source operating system project designed specifically for the RISC-V architecture, has also gained momentum. Additionally, efforts are being made to improve kernel-based performance and optimize instruction execution through cluster command processing. As a result, the future looks bright for the adoption of this technology in various applications.",
    "The OpenRISC1000 processor architecture defines an instruction set for designing and implementing processors. The development of other variants, such as 32-bit and 128-bit ISA configurations, aims to enhance the capabilities of IT systems. Packages are compiled and assembled on x86-64 hosts before being cross-compiled from RISC-V architectures. Physical Implementation refers to the practical application and optimization of QEMU virtual machines on actual RISC-V hardware. The development of MILIS Linux for RISC-V architecture faces kernel level difficulties, but infrastructure transfer work is ongoing. This paper presents a discussion on the development life-cycle of an open source operating system built on the RISC-V architecture.",
    "The RISC-V architecture has become widespread in embedded devices, utilizing a real board as its physical hardware platform. The prerootfs will be used at Package Production to cross-compile software packages from an x86-64 host to a riscv64 target file system. The compilation tools will be optimized for the production of software packages on RISC-V architecture. MILIS Linux, an open source operating system project, is designed specifically for this architecture and features its own package manager. The kernel plays a crucial role in managing computer hardware resources and providing services to computer programs. In contrast, 32-bit ports are not necessary for the current development context of MILIS Linux on RISC-V architecture. Compression of the instruction set enables less memory and processing power consumption while maintaining efficient processing capabilities. ARM processor production has limitations due to license term restrictions. The reference implementation based on MILIS is designed to enhance kernel support and minimize porting times for Linux distributions on RISC-V architecture. This work aims to develop an open source operating system, C. MILIS, which will be accepted into the Linux tree.",
    "The MILIS project aims to develop an open source Linux operating system specifically for RISC-V architecture. The prerootfs refers to a root filesystem designed for cross-compiling packages from x86-64 host to riscv64 target file system, which will be utilized in the production of software packages for the RISC-V architecture. This project has a broader term as MILIS project and is focused on providing a free and user-friendly platform for various users including government agencies and private organizations. The operating system is designed to operate on the RISC-V processor, which may be used in mission critical projects. Companies participated to the RISC- V foundation, promoting the adoption and implementation of the open standard instruction set architecture. A proper separation refers to the intended process of establishing a distinct and independent boundary between the Berkeley Bootloader (BBL) and the Linux kernel in the context of RISC-V architecture development. The development and testing of the OS is focused on creating and evaluating the operating system, specifically MILIS Linux, on RISC-V architecture using emulation tools like QEMU to simulate the environment without requiring physical hardware.",
    "The MILIS Linux project, which started in 2016, aims to develop a free and user-friendly operating system for RISC-V architecture. The specific purposes of this project include adapting and optimizing the Linux kernel for the RISC-V processor, which will be obtained through SiFive's development motherboards. This effort involves addressing kernel-level difficulties by providing necessary solutions. In addition, Fedora is another distribution that focuses on developing a native operating system by compiling software packages specifically for the RISC-V architecture. The building blocks of this development life-cycle include Init and Halt Code, Atomic and Locking Code, Generic library routines and assembly, ELF and module implementation, Task implementation, Device, timer, IRQs, and the SBI, Paging and MMU, User-facing API, and Build Infrastructure.",
    "The MILIS project, an open source Linux distribution initiative, aims to provide a free and user-friendly operating system for government agencies and private organizations. To achieve this goal, the project utilizes Linux from Scratch techniques and features its own package manager. The RISC-V architecture is supported by various configurations, including 32-bit and 128-bit ISA configurations, as well as 64-bit options. A virtual board allows testing and development on simulated hardware without requiring physical devices. The kernel and userspace packages are available in MILIS, which has an independent base. The project's focus on open standards facilitates collaboration within the community. Compilation and testing provide a better understanding of the RISC-V architecture's specific components that require optimization.",
    "The MILIS project, an open source Linux distribution initiative, aims to develop a free and user-friendly operating system for various users including government agencies and private organizations. The project utilizes RISC-V architecture, which features load-store commands that facilitate access to memory. A real board refers to physical hardware platforms utilizing this processor, allowing for more accurate compilation and testing of software. MILIS Linux is an open source operating system development project designed to operate on the RISC-V architecture, featuring an independent user space and its own package manager. The development and testing of the OS refer to processes involved in creating and evaluating the operating system using emulation tools like QEMU.",
    "The Linux kernel, specifically version 3.1, has been adapted to run on RISC-V architecture through a process called porting. This effort involves developing and integrating various components such as init code, device management, and user-facing APIs. The MILIS project aims to create an open-source operating system for this emerging instruction set architecture (ISA). To achieve this goal, the project is working on infrastructure transfer work, including task implementation, compression of the instruction set, and building a RISC-V system emulator. Additionally, legacy distributions such as Debian have started porting their systems to support the new ISA.",
    "The RISC-V architecture has been gaining popularity due to its open-source nature and flexibility. The MILIS project aims to develop a Linux-based operating system specifically for the RISC-V architecture, which will provide a free and user-friendly platform for various users including government agencies and private organizations. To achieve this goal, the development community is working on building kernels in RISC-V architecture using Binutils 2.30 and GCC version 7.1 or higher. The project also involves developing extensions to basic ISA configurations, which will enable more complex operations such as atomic and locking code. Additionally, the open-source ecosystem surrounding RISC-V has been mobilizing academia and communities to develop new hardware and software solutions.",
    "The development of MILIS Linux, an open-source operating system for RISC-V architecture, involves several key components. The processor plays a crucial role as it requires hardware support from computer systems. The kernel git repository contains version 5.0, which was obtained to build the kernel for their RISC-V architecture-oriented operating system. Debian, another popular Linux distribution, has produced port versions adapted specifically for this architecture. Proposed changes are being made to specification revisions, enabling future updates and enhancements. In addition, a web-based compilation tracking system has been established to facilitate efficient coordination among developers. Implementations of software on the RISC-V architecture vary but are not the primary focus of the initiative. The production race among manufacturers in processor design and production is ongoing, with companies like Shakti contributing new generation processors utilizing this open-source architecture. Many countries have joined forces through organizations such as ASTC to promote the development and use of RISC-V.",
    "The MILIS project, an open source Linux distribution initiative for RISC-V architecture, has been mobilizing industry efforts to develop a toolchain that includes cross-compilers. The GNU/Linux projects have contributed to this effort by providing kernel and userspace packages. In addition, the development of embedded devices as a separate branch is crucial for creating user-ecosystems on RISC-V processors. Furthermore, improvements in memory usage are necessary for efficient system performance. Moreover, the Linux community has been working on porting the operating system to various architectures, including RISC-V architecture-oriented work. The use of virtual boards and System Emulation enables testing without physical hardware. Finally, the development motherboards provide a platform for developers to create applications that run on RISC-V processors.",
    "The development of MILIS Linux, a free and easy to use operating system for RISC-V architecture, involves much research remaining in areas such as Init and Halt Code, Atomic and Locking Code, Generic library routines and assembly, ELF and module implementation. The project aims to provide an independent user space and its own package manager, which is essential for creating a desktop-targeted operating system that can run on x86-64 systems. To achieve this goal, the team may use emulation devices or Berkley Bootloader, a RISC-V specific bootloader designed to execute before an operating system runs. The project also involves open source hardware studies and license-free extensions to basic ISA, which are crucial for developing Legacy distributions that can support various architectures.",
    "The MILIS project aims to develop a Linux-based operating system for RISC-V architecture, which faces kernel level difficulties due to technical challenges. To overcome these issues, proposed changes are being made to future specification revisions. The project enables port migration of different Linux distributions and provides kernel- based improvements to better support the RISC-V architecture. Additionally, research and development activities are ongoing for chip production, with a focus on advancing open source hardware architectures like RISC-V. Furthermore, ELF and module implementation is crucial for enabling the execution and modularity of applications in the system.",
    "The Berkeley Bootloader (BBL) may be used in this project, which aims to develop a Linux distribution for RISC-V architecture. The processor has a broader term of physical hardware, and development motherboards have a broader term of motherboards. Berkeley University started designing the RISC-V command set architecture, while Fedora established the web-based compilation tracking system. Proposed changes are producing hardware, and open source Linux based OS has a broader term of open source. Power ISA has a broader term of physical hardware, and MILIS is a Linux distribution project that aims to provide an independent base and package manager for RISC-V architecture. The kernel has a broader term of software, while assembly has a broader term of programming languages.",
    "The MILIS project, an open-source Linux distribution initiative, aims to develop a free and user-friendly operating system for RISC-V architecture. Buildroot, a build system that simplifies creating custom Linux distributions, plays a crucial role in this endeavor. The OS kernel is the core component of the operating system, responsible for managing hardware resources and providing essential services. To overcome kernel-level difficulties, Fedora, another Linux distribution, provides native compile support through LLVM Compiler Infrastructure. This enables developers to create software applications that can run on RISC-V architecture without requiring physical hardware. Development motherboards and virtual boards provide a simulated environment for testing and development purposes.",
    "The LLVM Compiler Infrastructure will increase native compile support, enabling more efficient software development for RISC-V architecture. MILIS, a Linux distribution project, has its roots in operating systems and utilizes free open source core hardware designs to provide an independent base with its own package manager. The kernel is built using GCC 9.1 and provides the foundation for various operating systems, including desktop-targeted ones like Linux. IRQs are managed by physical hardware components such as Intel management engines, which also enable remote system monitoring capabilities. New generation processors have led to a production race in processor design, driving innovation in computer systems. Open source computing systems provide transparency and collaboration opportunities, making them ideal for government agencies and private users alike.",
    "The MILIS project, an open source Linux distribution initiative, aims to provide a free and easy-to-use operating system for both individual and organizational use. The project utilizes RISC-V architecture, which features more register areas that enhance memory usage efficiency. This study focuses on developing packages specifically designed for the RISC-V architecture, including live system packages that create a bootable image of an operating system. Open source hardware plays a crucial role in this development process, as it allows for collaboration and innovation in hardware design. The project also involves proper separation between the Berkeley Bootloader (BBL) and the Linux kernel to optimize command processing. Furthermore, MILIS is supported by the BAP unit at Akdeniz University.",
    "The MILIS project, an open-source Linux distribution initiative, aims to develop a free and user-friendly operating system for RISC-V architecture. The hardware side refers to the physical components of computer systems that enable software applications to run. Linux from Scratch provides a step-by-step guide for building custom Linux operating systems. Long sub-level commands are used in CISC architectures to facilitate memory management. Yocto enables creation of custom Linux distributions and embedded Linux systems. MILIS applies Linux From Scratch directives, utilizing kernel and userspace packages developed specifically for the 64-bit little-endian RISC-V architecture. The Intel Management Engine provides various management features independent of the main CPU. Genpro is a company developing new generation processors using the RISC-V architecture.",
    "The Linux kernel, created by Linux, serves as the foundation for various operating systems and software distributions. As an open source operating system, it allows users to view, modify, and distribute its source code, promoting collaboration and transparency in its development. The Linux community has developed Fedora, a Linux distribution that focuses on developing a native operating system by compiling software packages specifically for the RISC-V architecture. Industry 4.0 increases interest in such software, which includes open-source operating systems like MILIS Linux that are being developed to support the RISC-V architecture. In addition, Debian is another widely used open- source operating system based on the Linux kernel, known for its stability and extensive software repository.",
    "The RISC-V instruction set architecture, licensed under the BSD license, has enabled open source development and implementation without restrictions. The usage of this open source instruction set has led to the creation of Linux images that can be deployed on various hardware platforms. Research studies have been conducted to develop new products and technologies using the RISC-V ISA. An open source hardware initiative aims to promote the development and sharing of hardware designs, which is essential for creating compatible systems. The Buildroot build system simplifies the process of creating custom Linux distributions for embedded systems. A compiled kernel is a software component that has been processed into a binary format, enabling it to be executed by an operating system as part of its core functionality. Various Linux distributions have started gaining momentum on different processors, with IRQs being used to manage and prioritize interrupts from various devices.",
    "The development life-cycle of an open source operating system built on the RISC-V architecture, specifically focusing on the implementation of MILIS Linux. GCC 7.1 and GCC 9.1 are versions of the GNU Compiler Collection used for software development. ASELSAN is producing chips that utilize the RISC-V architecture for enhanced performance and open-source capabilities. The Internet of Things increases interest in such software. IRQs, or Interrupt Request Lines, are hardware signals used to manage and prioritize interrupts from various devices at a hardware level. Debian is an open source operating system based on the Linux kernel. This paper presents research on the development life-cycle of MILIS Linux. Motherboards are essential computer components that serve as the main circuit board connecting and allowing communication between various hardware components such as the CPU, memory, and peripheral devices. Minimal custom Linux images refer to lightweight and tailored Linux operating system images created using tools like Yocto and Buildroot designed to meet specific requirements for RISC-V architecture development boards.",
    "The Recreation of Rootfs project aims to reconstruct the base file system for a RISC-V architecture, utilizing packages from MILIS Linux and creating a bootable binary disk image. This process involves building an operating system on top of the Linux kernel 3.1, which is responsible for managing hardware resources in computer systems. The open source nature of this project allows collaboration with organizations like Shakti, working on new generation processors. To achieve this goal, researchers will perform R&D studies using real equipment and leverage software tools such as Binutils 2.32 to build the kernel. Additionally, they will utilize QEMU 4.0.0 for virtualization purposes. The Linux tree serves as a foundation for various operating systems, including Debian, which has its own package manager. Furthermore, hardware information is crucial in this process, highlighting the importance of physical hardware and embedded devices within computer systems.",
    "The Linux kernel, as part of the kernel and user space software, operates in a privileged mode managing hardware resources. The processor market refers to the production, distribution, and sale of computer processors and related semiconductor technologies. MILIS, an open source operating system development project, utilizes Linux from Scratch techniques featuring its own package manager for providing a free and user-friendly platform on RISC-V architecture. Userspace packages run in the userspace memory space where applications operate independently of the kernel. The importance of hardware-level security is emphasized to mitigate risks such as those exposed by Meltdown and Spectre vulnerabilities. GNU/Linux projects, including MILIS Linux project, are open source operating system initiatives that provide a free platform for various users.",
    "The studies on RISC-V Instruction Set Architecture (ISA) aim to develop open and secure computing systems. Research efforts focus on computer architecture, with high-level access rights granted to processors for executing instructions and accessing critical system resources. The following areas of research include Paging and MMU mechanisms that manage memory translation and allocation. Linux Kit produces minimal custom Linux images tailored for RISC-V architecture development boards. Bootable binary disk images contain a complete copy of the file system, including an operating system. GCC is used to compile source code into executable programs essential for building kernels on RISC-V architecture. Web browsers are applications that access and navigate web pages. Intel management engine provides remote management and monitoring capabilities independent of the main CPU. MILIS Linux is an open-source operating system development project designed to operate on RISC-V architecture, featuring its own package manager. Buildroot produces minimal custom Linux images for embedded systems. The RISC-V foundation includes ASELSAN as a member organization. Kernel and user space software run in separate memory spaces with the kernel managing hardware resources and userspace providing applications and services.",
    "The open source hardware initiative aims to promote collaborative development and sharing of hardware designs. The C Bootloader executes before an operating system, which manages computer resources. Work packages are defined segments within a project that outline specific tasks. Genpro is developing new generation processors utilizing RISC-V architecture. Paging and MMU refer to mechanisms used in computer systems for managing memory. The RISC-V Foundation promotes the adoption of open standard instruction set architectures. Research studies conducted by organizations aim to develop new products or processes, often involving both research and development activities. MILIS project is an initiative aimed at developing a Linux-based operating system specifically for RISC-V architecture. Compilation tools automate the process of converting source code into executable code. Real equipment refers to physical hardware that will be utilized for research studies.",
    "The MILIS Linux project, initiated in 2016, utilizes Linux from Scratch techniques to provide a free and user-friendly operating system for various users. This open source operating system allows developers to engage with and utilize Linux in its most unaltered form, facilitating software creation without reliance on pre-existing distributions or modifications. The QEMU virtual machine emulator enables the development and testing of operating systems without physical hardware. Commercial innovators can discover and improve Instruction Set Architecture (ISA) for RISC-V architecture devices. Minimal custom Linux images are created using tools like Yocto and Buildroot to meet specific requirements for RISC-V architecture development boards. The infrastructure transfer work by legacy Linux distributions, such as Debian, adapts their systems to the RISC-V architecture.",
    "The RISC-V foundation, comprising reputable organizations and companies including ASELSAN, collaborates to promote and develop the open-source instruction set architecture. Fedora, a Linux distribution focused on developing native operating systems for the RISC-V architecture, has its broader term in Linux distributions. Binutils 2.32 is a version of software tools used for manipulating binary files. Yocto produces minimal custom Linux images tailored for specific requirements. The members of the RISC-V foundation include ASELSAN and other organizations that have started research and development studies to develop new products and technologies. Many companies, including those participating in the RISC-V foundation, have started their own package managers to manage software packages independently. LFS refers to Linux from Scratch, a technique used to build custom Linux distributions by compiling and configuring all components manually. The Berkley Bootloader is a specialized bootloader for RISC-V architecture that directly links the Linux kernel binary into its ELF file. A native OS specifically designed for the RISC-V architecture utilizes its features and capabilities. ETH Zurich participates in the RISC-V foundation to support the development of open-source processor architectures. Work packages are defined segments of work within projects, outlining specific tasks, deliverables, and objectives. The MILIS project is an initiative aimed at developing a Linux-based operating system specifically for the RISC-V architecture. C. Bootloader executes before loading the operating system or other software components.",
    "The GNU operating system, which has its roots in an open source project, relies on Glibc as a crucial C library implementation. Fedora, another Linux distribution, also builds upon software principles to provide users with a pure Linux usage and development experience. The Recreation of Rootfs process involves creating a bootable binary disk image for kernel and user space software using F. Bootable Image. In the context of open source operating systems like Debian, compilation and testing are essential processes that yield more accurate results. Furthermore, vulnerabilities such as Meltdown highlight the importance of robust security measures in modern computing. The Berkeley Bootloader (BBL) is a specialized bootloader for RISC-V architecture that enables efficient memory management through register areas and paging mechanisms facilitated by the MMU. Additionally, research and development efforts like those conducted at Si-five contribute to advancing open source hardware architectures.",
    "The open source hardware initiative promotes collaboration and innovation by making physical devices and systems publicly available. The BSD license allows software to be freely used, modified, and distributed with minimal restrictions. High security at software level emphasizes the importance of protecting computing systems from vulnerabilities. MMU is a component responsible for handling memory access in computer systems. Linux from Scratch provides a step-by-step guide for building custom Linux operating systems. QEMU enables running operating systems on different architectures. The MILIS project aims to develop an open source Linux distribution specifically for RISC-V architecture, with contributions from Bilkent University and ASELSAN. Chips developed by these organizations utilize the RISC-V architecture for enhanced performance and open-source capabilities. Bootloaders like Berkley Bootloader provide essential booting functionalities before loading operating systems. Desktop-targeted operating systems are designed for personal computers, while load-store commands facilitate data transfer between processor and memory. The Linux kernel manages hardware resources and provides services to software applications. Open source refers to a development model that allows users to freely access, modify, and distribute software. Debian is an open-source operating system based on the Linux kernel.",
    "The general workflow outlines the steps involved in constructing the RISC-V computing environment, including system emulation and toolchain setup. The MILIS project, an open-source Linux distribution initiative, was closed due to copyright reasons. This vulnerability highlights the need for addressing hardware-level flaws like Meltdown and Spectre vulnerabilities. BBL supports the default boot loading process, which initializes a computer's operating system by loading necessary software from storage into memory during startup. Programming languages use LLVM Compiler Infrastructure, while Glibc is a C library that provides essential functions for C programming. Musl is also a lightweight implementation of the standard C library designed for Linux-based systems. The Linux from Scratch project allows users to build a custom Linux operating system from scratch, enabling them to understand and tailor it to their specific needs. SCARV research group focuses on open-source computer architecture related to RISC-V instruction set architecture. GNU/Linux projects refer to various open-source operating system initiatives based on the GNU and Linux software components. Bootloaders like BBL initialize the operating system during booting, providing options for loading the OS kernel and configuring the system environment. The weakness of computing persists despite high security measures at the software level due to hardware-level issues. Linux kernel 3.1 is a version of the Linux kernel responsible for managing hardware resources. Kernel and user space software refer to components where the kernel operates in privileged mode, while user space software runs in restricted mode providing applications and services that interact with the kernel. The kernel environment refers to configuration settings that can be modified by bootloaders to prepare and manage the operating system kernel before execution. An operating system manages computer hardware resources, providing services for computer programs enabling application execution on a computing system. Debian is an open-source operating system based on Linux kernel known for its stability and extensive software repository.",
    "The Linux community has been instrumental in developing and promoting the open-source operating system, GNU/Linux. This collaborative effort has led to a wide range of software applications being developed for this platform. The processor sector plays a crucial role in providing hardware support for these systems. However, closed and license problems have hindered innovation in this area. To address this issue, organizations like ASTC are working towards developing open-source RISC-V architecture. Additionally, the Meltdown-Spectre vulnerability has highlighted the need for addressing hardware-level flaws to ensure overall system security. Furthermore, port migration of different Linux distributions is underway to operate on new architectures.",
    "The QEMU emulator's full system emulation mode requires an operating system to function. This feature allows for the execution of unmodified guest operating systems as if they were running on actual hardware, highlighting the importance of high security at software level in addressing vulnerabilities like Meltdown and Spectre. Storage devices are a type of hardware in a computer system that can be emulated using full system emulation mode. The development of other variants will consider future work to optimize compilation tools for RISC-V architecture support. In addition, starting and response tasks involve timer interrupts during the boot process, while an open development platform provides pure Linux usage and development experience. Furthermore, paging and MMU mechanisms are used in memory management to translate virtual addresses to physical addresses.",
    "The open development platform, designed for developers, enables them to utilize and enhance a pure Linux experience. The kernel environment has a broader term of operating system, which manages computer hardware and software resources. IIT Madras, one of the companies participating in this project, is known for its engineering, technology, and scientific education. Buildroot, a build system that simplifies creating custom Linux distributions, falls under the category of Linux distributions. The Barcelona Supercomputing Center, another company involved, focuses on high-performance computing and computational science. MMU refers to Memory Management Unit, responsible for handling memory access and management tasks in computer systems. QEMU is an open-source emulator and virtualizer that allows users to run multiple operating systems on a single host machine. Meltdown- Spectre vulnerabilities show the weakness of computing, which persists despite high security measures at the software level. OpenCelerity, a research group focused on open source computer architecture, established by universities to advance research and development in this area. LFS refers to Linux from Scratch, a technique used to build custom Linux distributions from scratch. Paging is a memory management scheme that eliminates the need for contiguous allocation of physical memory. The processor market has not been able to make great improvements due to issues related to closed architectures and licensing restrictions.",
    "The much research on RISC-V Linux port has led to significant advancements, with many organizations like ASELSAN and Shakti contributing to its development. The BSD license allows for open source software distribution, which aligns with the commercially open license used by companies. To address hardware weaknesses such as Meltdown-Spectre vulnerabilities, distro developers can integrate their work with user-space application levels. Additionally, Linux distributions like Yocto and Buildroot have been developed to run on various storage devices, leveraging physical hardware capabilities. Furthermore, QEMU's full system emulation mode enables the execution of unmodified guest operating systems, while U-Boot provides a bootloader for embedded systems.",
    "The Berkeley Bootloader (BBL) compiles with the '-withpayload config parameter' to specify the inclusion of a payload, which references the compiled kernel during the build process. This bootloader is distinct from other bootloaders like GRUB or U-Boot, as it directly links the Linux kernel binary into its ELF file. The development of RISC-V architecture has led to organizations such as ETH Zurich and Genpro contributing to open source hardware studies. In addition, companies are participating in the RISC-V foundation to support the development of this new generation processor. Furthermore, QEMU's full system emulation mode allows for the execution of unmodified guest operating systems on a host system. The compilation and testing process will give results that enhance the accuracy of developing an open source operating system on RISC-V architecture.",
    "The MILIS Linux project, driven by open-source principles and community-driven design, has made significant strides in developing a user-friendly platform for both individual and organizational use. The project's foundation lies in U-Boot, a popular bootloader that initializes hardware and loads operating systems. Binutils 2.32, part of the toolchain, plays a crucial role in software development. QEMU 4.0.0, an emulator, enables unmodified guest operating systems to run on actual hardware. The project's optimization techniques are rooted in various methods employed by distro developers and Linux distributions. GNU, as a free software operating system, promotes collaborative development and transparency. Western Digital, one of the companies supporting RISC-V architecture, has contributed significantly to its growth. The BBL ELF file is used for booting on RISC-V architecture, while Boot chain loading ensures that an operating system can be initialized through default boot loading process.",
    "QEMU 4.0.0, a specific version of the QEMU software, allows users to run multiple operating systems on a single host machine through its full system emulation mode. The recent developments of Huawei product bans have led companies like ASELSAN and Shakti to support the development of RISC-V architecture. Binutils 2.32 is used in conjunction with GCC 9.1 for software development, while Bootloaders provide options for loading operating systems and configuring kernel environments. In addition, debugging commands are available within bootloaders to modify kernel settings prior to booting. The target users of MILIS include government agencies and commercial organizations that seek a free and easy-to-use operating system.",
    "The '-withpayload config parameter' allows for the inclusion of payloads during kernel compilation. This feature can be beneficial to open source hardware, which may face world trade disputes that could impact their development and distribution. In addition, commands for debugging and modifying the kernel environment provide a broader understanding of how these settings affect system performance. The GNU project is an example of organizations promoting free software and collaborative research efforts. Similarly, the processor market operates within the industry sector, where companies like Genpro are developing new generation processors using RISC-V architecture. Research institutions such as IIT Madras and ETH Zurich provide a foundation for scientific inquiry through their universities and research groups. Government agencies also play a role in supporting research projects with funding, which can lead to more accurate results. Existing works serve as a basis for further study and evaluation.",
    "Commercial organizations, such as Western Digital and Huawei, operate within a broader framework of organizations. Universities like Akdeniz University, Bilkent University, and Berkeley University are also part of this organizational landscape. ASELSAN, a Turkish defense company, collaborates with Bilkent University on specific projects. The recent developments surrounding Huawei product bans have significant implications for the organization's ability to operate globally. Countries such as India and Israel are just two examples of nations that make up the broader category of countries."
  ],
  "times": [
    650.5975632667542
  ]
}