{
  "iri": "Paper-69",
  "title": "E91-1012",
  "authors": [],
  "keywords": [],
  "sections": [
    {
      "iri": "Paper-69-Section-1",
      "subtitle": "Abstract",
      "paragraphs": [
        {
          "iri": "Paper-69-Section-1-Paragraph-1",
          "sentences": [
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-1",
              "text": "A purely functional implementation of LR-parsers is given , together with a simple correctness proof ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-2",
              "text": "It is presented as a generalization of the recursive descent parser ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-3",
              "text": "For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-4",
              "text": "Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-5",
              "text": "For LR -LRB- 0 -RRB- grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz -LSB- 1 -RSB- and Roberts -LSB- 2 -RSB- ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-6",
              "text": "Extended CF grammars -LRB- grammars with regular expressions at the right hand side -RRB- can be parsed with a simple modification of the LR-parser for normal CF grammars ."
            }
          ]
        }
      ]
    }
  ],
  "summary": "A purely functional implementation of LR-parsers is given , together with a simple correctness proof . It is presented as a generalization of the recursive descent parser . For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations . Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest . For LR -LRB- 0 -RRB- grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz -LSB- 1 -RSB- and Roberts -LSB- 2 -RSB- . Extended CF grammars -LRB- grammars with regular expressions at the right hand side -RRB- can be parsed with a simple modification of the LR-parser for normal CF grammars .",
  "kg2text": [
    "Our parser is a purely functional implementation of LR-parsers, which is cubic in time complexity. This parser is closely related to our algorithm, which itself is associated with recursive ascent parsers. The implementation of LR-parsers is presented as a generalization of the recursive descent parser, and it includes a simple correctness proof to validate its functionality. Furthermore, our parser has a broader classification as a parser, while the purely functional implementation of LR-parsers is also categorized under LR-parsers. Recursive ascent parsers, which were discovered by Kruse-man Aretz and Roberts, are a significant aspect of this domain. Additionally, memo-functions play a crucial role in optimizing the parsing process by facilitating a very compact representation of the parse forest, and they are a broader term under functions. Lastly, the LR-parser for normal CF grammars serves as a modification of normal CF grammars, demonstrating the interconnectedness of these parsing concepts.",
    "A generalization of the recursive descent parser, along with LR-parsers for normal CF grammars and recursive descent parsers, all fall under the broader category of parsers. These parsers utilize various techniques to analyze and interpret input data. Memo-functions play a crucial role in facilitating the creation of a parse forest, which is a compact representation of all possible parse trees for a given input. Additionally, recursive ascent parsers are classified as algorithms that extend the capabilities of traditional parsing methods. Normal CF grammars are a specific type of CF grammars, while grammars with regular expressions at the right hand side incorporate regular expressions into their production rules. Non-LR grammars, on the other hand, are characterized by their time-complexity, which presents challenges for parsing. Lastly, the results of previous invocations in parsing processes are stored to optimize performance, indicating a broader relationship with the concept of results."
  ],
  "times": [
    6.757889032363892
  ]
}