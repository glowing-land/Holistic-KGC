{
  "iri": "Paper-69",
  "title": "E91-1012",
  "authors": [],
  "keywords": [],
  "sections": [
    {
      "iri": "Paper-69-Section-1",
      "subtitle": "Abstract",
      "paragraphs": [
        {
          "iri": "Paper-69-Section-1-Paragraph-1",
          "sentences": [
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-1",
              "text": "A purely functional implementation of LR-parsers is given , together with a simple correctness proof ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-2",
              "text": "It is presented as a generalization of the recursive descent parser ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-3",
              "text": "For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-4",
              "text": "Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-5",
              "text": "For LR -LRB- 0 -RRB- grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz -LSB- 1 -RSB- and Roberts -LSB- 2 -RSB- ."
            },
            {
              "iri": "Paper-69-Section-1-Paragraph-1-Sentence-6",
              "text": "Extended CF grammars -LRB- grammars with regular expressions at the right hand side -RRB- can be parsed with a simple modification of the LR-parser for normal CF grammars ."
            }
          ]
        }
      ]
    }
  ],
  "summary": "A purely functional implementation of LR-parsers is given , together with a simple correctness proof . It is presented as a generalization of the recursive descent parser . For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions , i.e. functions that memorize the results of previous invocations . Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest . For LR -LRB- 0 -RRB- grammars , our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz -LSB- 1 -RSB- and Roberts -LSB- 2 -RSB- . Extended CF grammars -LRB- grammars with regular expressions at the right hand side -RRB- can be parsed with a simple modification of the LR-parser for normal CF grammars .",
  "kg2text": [
    "For non-LR grammars, one can use the recursive ascent parsers. This type of parser has a broader term called 'parser', which uses Left Recursion to parse strings. A purely functional implementation provides a simple correctness proof for LR-parsers, which are also known as 'LR-parser'. Memo-functions facilitate a simple way to construct a very compact representation of the parse forest. Recursive ascent parsers and recursive descent parsers both have a broader term called 'parser', with the former being recently discovered by Kruse-man Aretz and Roberts. Furthermore, there is a generalization of the recursive descent parser that has a broader term called 'generalization'. Lastly, an implementation provides a process or method for putting plans or designs into effect."
  ],
  "times": [
    6.59281325340271
  ]
}